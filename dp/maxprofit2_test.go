package dp_test

import (
	"testing"
)

func TestMaxProfit1(t *testing.T) {
	// 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

	// 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

	// 注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

	// 示例 1:
	// 输入: [3,3,5,0,0,3,1,4]
	// 输出: 6
	// 解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
	//      随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。

	t.Log(maxProfit2([]int{3, 3, 5, 0, 0, 3, 1, 4}))

	// 示例 2:
	// 输入: [1,2,3,4,5]
	// 输出: 4
	// 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
	//      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
	//      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。

	t.Log(maxProfit2([]int{1, 2, 3, 4, 5}))

	// 示例 3:
	// 输入: [7,6,4,3,1]
	// 输出: 0
	// 解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。
	t.Log(maxProfit2([]int{7, 6, 4, 3, 1}))
}

func maxProfit2(prices []int) int {
	n := len(prices)
	if n <= 0 {
		return 0
	}

	// 状态定义, 1维: 天数, 2维: 交易次数, 3维: 未持有与持有
	mp := make([][][]int, n)
	for i := 0; i < n; i++ {
		mp[i] = make([][]int, 3)
		for j := 0; j < 3; j++ {
			mp[i][j] = make([]int, 2)
			if i == 0 {
				mp[i][j][0] = 0
				mp[i][j][1] = -prices[0]
			}
		}
	}

	for i := 1; i < n; i++ {
		for k := 0; k < 3; k++ {
			if k == 0 {
				mp[i][k][0] = mp[i-1][k][0]
			} else {
				// 不动或卖出
				if mp[i-1][k][0] > mp[i-1][k-1][1]+prices[i] {
					mp[i][k][0] = mp[i-1][k][0]
				} else {
					mp[i][k][0] = mp[i-1][k-1][1] + prices[i]
				}
			}

			// 不动或买入
			if mp[i-1][k][1] > mp[i-1][k][0]-prices[i] {
				mp[i][k][1] = mp[i-1][k][1]
			} else {
				mp[i][k][1] = mp[i-1][k][0] - prices[i]
			}
		}
	}

	return mp[n-1][2][0]
}
